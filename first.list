     1                                    ;; Archivo: first.asm
     2                                    ;; Primer programa en ensamblador. Este programa pide dos
     3                                    ;; enteros como entrada e imprime su suma
     4                                  
     5                                    ;; Para crear el ejecutable usando djgpp:
     6                                    ;;
     7                                    ;; nasm -f coff first.asm
     8                                    ;; gcc -o first first.o driver.o asm_io.o
     9                                  
    10                                    %include "asm_io.inc"
    11                              <1> 	extern  read_int, print_int, print_string
    12                              <1> 	extern	read_char, print_char, print_nl
    13                              <1> 	extern  sub_dump_regs, sub_dump_mem, sub_dump_math, sub_dump_stack
    14                              <1> 
    15                              <1> %macro 	dump_regs 1
    16                              <1> 	push	  dword %1
    17                              <1> 	call	  sub_dump_regs
    18                              <1> %endmacro
    19                              <1> 
    20                              <1> 
    21                              <1> ;
    22                              <1> ; usage: dump_mem label, start-address, # paragraphs
    23                              <1> %macro  dump_mem 3
    24                              <1> 	push	 dword %1
    25                              <1> 	push	 dword %2
    26                              <1> 	push	 dword %3
    27                              <1> 	call	 sub_dump_mem
    28                              <1> %endmacro
    29                              <1> 
    30                              <1> %macro	dump_math 1
    31                              <1> 	push	 dword %1
    32                              <1> 	call	 sub_dump_math
    33                              <1> %endmacro
    34                              <1> 
    35                              <1> %macro  dump_stack 3
    36                              <1> 	push	 dword %3
    37                              <1>         push     dword %2
    38                              <1> 	push	 dword %1
    39                              <1>         call     sub_dump_stack
    40                              <1> %endmacro
    41                                    ;;
    42                                    ;; Los datos iniciados se colocan en el segmento .data
    43                                    ;;
    44                                    segment .data
    45                                    ;;
    46                                    ;; Estas etiquetas se refieren a las cadenas usadas para la salida
    47                                  ;;
    48 00000000 44696769746520756E-       prompt1 db "Digite un numero: ", 0 ; no olvide el fin de cadena
    49 00000009 206E756D65726F3A20-
    50 00000012 00                 
    51 00000013 446967697465206F74-       prompt2 db "Digite otro  numero: ",0
    52 0000001C 726F20206E756D6572-
    53 00000025 6F3A2000           
    54 00000029 55642E206861206469-       outmsg1 db "Ud. ha digitado ", 0
    55 00000032 67697461646F2000   
    56 0000003A 20792000                  outmsg2 db " y ", 0
    57 0000003E 2C206C612073756D61-       outmsg3 db ", la suma es ", 0
    58 00000047 2065732000         
    59                                  
    60                                    ;;
    61                                    ;; Los datos no iniciados se colocan en el segmento .bss
    62                                    ;;
    63                                    segment .bss
    64                                    ;;
    65                                    ;; Estas etiquetas se√±alan a palabras dobles usadas para almacenar los datos
    66                                    ;; de entrada
    67                                    ;;
    68 00000000 <res 00000004>            input1 resd 1
    69 00000004 <res 00000004>            input2 resd 1
    70                                  
    71                                    ;;
    72                                    ;; El codigo se coloca en el segmento .text
    73                                    ;;
    74                                    segment .text
    75                                            global  asm_main
    76                                    asm_main:
    77 00000000 C8000000                          enter   0,0             ; setup routine
    78 00000004 60                                pusha
    79                                  
    80 00000005 B8[00000000]                      mov     eax, prompt1    ; print out prompt
    81 0000000A E8(00000000)                      call    print_string
    82                                  
    83 0000000F E8(00000000)                      call    read_int        ; lee un entero
    84 00000014 A3[00000000]                      mov     [input1], eax   ; lo almacena en input1
    85                                  
    86 00000019 B8[13000000]                      mov     eax, prompt2    ; print out prompt
    87 0000001E E8(00000000)                      call    print_string
    88                                  
    89 00000023 E8(00000000)                      call    read_int        ; lee un entero
    90 00000028 A3[04000000]                      mov     [input2], eax   ; lo almacena en input2
    91                                  
    92 0000002D A1[00000000]                      mov     eax, [input1]   ; eax = dword en input1
    93 00000032 0305[04000000]                    add     eax, [input2]   ; eax += dword en input2
    94 00000038 89C3                              mov     ebx, eax        ; ebx = eax
    95                                  
    96                                            dump_regs 1             ; imprime los valores de los registros
    97 0000003A 6A01                <1>  push dword %1
    98 0000003C E8(00000000)        <1>  call sub_dump_regs
    99                                            dump_mem  2, outmsg1, 1 ; imprime la memoria
   100 00000041 6A02                <1>  push dword %1
   101 00000043 68[29000000]        <1>  push dword %2
   102 00000048 6A01                <1>  push dword %3
   103 0000004A E8(00000000)        <1>  call sub_dump_mem
   104                                            ;;
   105                                            ;; Ahora, se imprime los resultados en una serie de pasos
   106                                            ;;
   107                                  
   108 0000004F B8[29000000]                      mov     eax, outmsg1
   109 00000054 E8(00000000)                      call    print_string    ; se imprime el primer mensaje
   110 00000059 A1[00000000]                      mov     eax, [input1]
   111 0000005E E8(00000000)                      call    print_int       ; se imprime input1
   112 00000063 B8[3A000000]                      mov     eax, outmsg2
   113 00000068 E8(00000000)                      call    print_string    ; se imprime el segundo mensaje
   114 0000006D A1[04000000]                      mov     eax, [input2]
   115 00000072 E8(00000000)                      call    print_int       ; se imprime input2
   116 00000077 B8[3E000000]                      mov     eax, outmsg3
   117 0000007C E8(00000000)                      call    print_string
   118 00000081 89D8                              mov     eax, ebx
   119 00000083 E8(00000000)                      call    print_int       ; se imprime la suma (ebx)
   120 00000088 E8(00000000)                      call    print_nl        ; se imprime una nueva linea
   121                                  
   122 0000008D 61                                popa
   123 0000008E B800000000                        mov     eax, 0          ; retorna a C
   124 00000093 C9                                leave
   125 00000094 C3                                ret
